
### **Short Notes on Inheritance in C++**

#### **1. Basic Concepts**
- **Inheritance**: Mechanism to create a new class (derived) from an existing class (base).
- **Base Class**: The class whose properties and methods are inherited.
- **Derived Class**: The class that inherits from the base class.
- **Access Specifiers**:
  - `public`: Base class members remain public in derived class.
  - `protected`: Base class members remain protected in derived class.
  - `private`: Base class members remain private in derived class.
- **Constructors and Destructors**:
  - Base class constructor is called first, then derived.
  - Derived class destructor is called first, then base.

#### **2. Advanced Concepts**
- **Overriding Methods**: Derived classes can override base class methods using the `override` keyword.
- **Multiple Inheritance**: A class can inherit from more than one base class.
- **Diamond Problem**: Ambiguity in multiple inheritance, solved by virtual inheritance.

#### **3. Abstract Classes and Virtual Functions**
- **Abstract Classes**: Cannot be instantiated; contains at least one pure virtual function.
- **Pure Virtual Functions**: Declared with `= 0` in the base class; must be overridden in derived classes.

#### **4. Virtual Destructors**
- **Virtual Destructors**: Ensure the proper destructor is called when deleting derived class objects through base class pointers.

#### **5. C++11 Features**
- **Override**: Ensures a method in a derived class overrides a base class method.
- **Final**: Prevents further overriding or inheritance.

#### **6. Multiple Inheritance and Virtual Base Classes**
- **Virtual Base Classes**: Prevents multiple instances of a base class in complex hierarchies.

#### **7. Run-Time Type Identification (RTTI)**
- **`dynamic_cast`**: Safely casts pointers/references in an inheritance hierarchy.

#### **8. Copy Constructors and Assignment Operators**
- Properly implement these in classes with inheritance, especially when managing resources.

### **Tips for Remembering**
- **Conceptual Understanding**: Always think of inheritance as a "is-a" relationship (e.g., a `Car` is a `Vehicle`).
- **Use Cases**: Abstract classes for defining interfaces, virtual functions for polymorphism, and multiple inheritance sparingly.
- **Practice**: Implement simple hierarchies (e.g., `Animal`, `Dog`, `Cat`) to reinforce concepts.

These notes should help you quickly recall the key aspects of inheritance when you need them.